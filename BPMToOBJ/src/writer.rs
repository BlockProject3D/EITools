use std::io::Result;
use std::io::Write;
use std::fs::File;
use std::io::BufWriter;
use std::path::Path;
use super::vec::Vec3f;
use super::vec::Vec2f;
use super::decompiler::Triangle;

fn write_vec3f(prefix: &str, writer: &mut dyn Write, vp: &Vec<Vec3f>) -> Result<()>
{
    for v in vp
    {
        writeln!(writer, "{} {} {} {}", prefix, v.x, v.y, v.z)?;
    }
    return Ok(());
}

fn write_vec2f(prefix: &str, writer: &mut dyn Write, vp: &Vec<Vec2f>) -> Result<()>
{
    for v in vp
    {
        writeln!(writer, "{} {} {}", prefix, v.x, v.y)?;
    }
    return Ok(());
}

fn write_tris(writer: &mut dyn Write, tris: &Vec<Triangle>) -> Result<()>
{
    for tri in tris
    {
        writeln!(writer, "f {}/{}/{} {}/{}/{} {}/{}/{}",
            tri.p1.vp, tri.p1.vt, tri.p1.vn,
            tri.p2.vp, tri.p2.vt, tri.p2.vn,
            tri.p3.vp, tri.p3.vt, tri.p3.vn
        )?;
    }
    return Ok(());
}

pub fn write(out: &str, vp: &Vec<Vec3f>, vn: &Vec<Vec3f>, vt: &Vec<Vec2f>, tris: &Vec<Triangle>) -> Result<()>
{
    let file = File::create(Path::new(out))?;
    let mut writer = BufWriter::new(file);

    writeln!(writer, "# Generated by BPM Decompiler {}", super::VERSION)?;

    writeln!(writer, "")?;
    writeln!(writer, "# Vertex positions")?;
    write_vec3f("v", &mut writer, &vp)?;

    writeln!(writer, "")?;
    writeln!(writer, "# Vertex normals")?;
    write_vec3f("vn", &mut writer, &vn)?;

    writeln!(writer, "")?;
    writeln!(writer, "# Vertex texture coordinates")?;
    write_vec2f("vt", &mut writer, &vt)?;

    writeln!(writer, "")?;
    writeln!(writer, "# Faces / triangles")?;
    write_tris(&mut writer, &tris)?;

    return Ok(());
}
